"""
利用Crypto做解密
"""
from Crypto import Random
from Crypto.PublicKey import RSA
from Crypto.Math.Numbers import Integer
from Crypto.Cipher import PKCS1_v1_5 as Cipher_pkcs1_v1_5
from Crypto.Cipher import PKCS1_OAEP as Cipher_OAEP

# 伪随机数生成器
random_generator = Random.new().read
# rsa算法生成实例
rsa = RSA.generate(1024, random_generator)

# master的秘钥对的生成
private_pem = rsa.exportKey()

n = 0xb8ed960024a0e70bc898b0a9ae12d48bcee6630708b7083b35a2b94ef847afacc24adf1575e02a8069c887b28ccde72c9487527ca66524f590e05a7b73bed05b7c7a050b08d0bfa806003162eae9b5ce55504a10a893a9c577b865925a58b1f30d1b83a5d066496806c83676a75b908b4aad77eb8e7eb18a8087b3a7d63cbd00ded3e6341bd517def4e5e93d95856ad5b15b50713744058fa8f999eeb3965daba9b172f8fd51c06d668e38b769097f5a3c31eb4f1391a4c59c36a717806c4ba3d11b2d444fa1fa0b2376b4d890b19ceda0bff48b6312b99b070ef94743f3643c005f932907222c839d60b26132182ff35380a7bd773194a6e389d1c078dc3ac5
n_int = int(str(n), 16)
e = 0x10001
e_int = int(str(e), 16)
d = 0x7247c08ece13f13442feb90de2d918285defd9fa9ad4216e15b33db9238d896ec592e751a7caa3f93f660115c215ec6a8c4f24168bedad6d63de818c10f73663930504e0d0cdcfe2d1f284929081652ce16400a152cc0dfa4e05d21f235df47a32fb71dba271d3a349ada89aa2c9df05755cc5e2f7e82b67600e7c6397ed690e778e8920e78de804ac42c38f1fdeabb4f0ba1c0051233f4db3beeca20da2eec793634b7be6374c93cffbec899faa2ca188daeef4954b10fc12fbbb4a21ef91f776fea7e8f9158dc95ed840a4b59402d2ce3e7b765e5d2085c474e23b8a03c4891e1d9df1493d9d35aece0900c0fab7d495691992352cf9faef29fa29ffddf301
d_int = int(str(d), 16)
p = 0xd206f0fc22a2cc0ce883d3a432a5cd74fa82b7468328290fe30b630c7f07ecf4054e77571d824145474f6c6dbad73616329e347e62d95cc721431d6042d475d81aaad611e9944f924b4fbd53650900a463c39af2ae3f9f065f6e5c66838c5113289bc951c6b5a120a826d13714f57c25e5ab4a913ab205276474593f10175631
p_int = int(str(p), 16)
q = 0xe168326f43de13fa2c17c02d943de0419cbbd889d087df1f6591c61c6b7e00cb73782719bc16e184543dfc514a262c5e38e15cc1bef4f93d70012d4a8982926b8d3ce50acc35b90adaec562d5ee11e19f35350e4b940a414f07a9e8b43d53f058798ee88e6e00d25f2992d0c9ec50ba4b051d16851a40cf522aa4f172db4c4d5
q_int = int(str(q), 16)
# u = p.inverse(q)
the_q_obj = Integer(q_int)
u = the_q_obj.inverse(q)


rsa = RSA.RsaKey(n=n_int, e=e_int, d=d_int, p=p_int, q=q_int, u=u)

message = "5cb30d833feaa8db2c62c419c901dec66d8a09f58ad0a459414187cbbb33aeba8c733e0a5466094d9a8000cbff06452f8267585596e90b40dfee0d094ccf4f1781b513f7c27dc165784eb79badb36d86da272276f07fd0c7778901b828b178b646b1eac3c5913bb0c72bcc8aa677837195fb1c642cb7bc2ff87d19b4e7cb853fb6e8fbc5d547a359b867bda72b83e2c1546ce4e2c5650cf6277a33db3c92d202da589b215c34f6f3e7db63152fd20c90c84c5699620ce254cb88f8fb2839532e3e343ce283b5a1d6af748a728eb7e3adf2ad53bbe8cf755308b5bda1fc5c4a96b46159b0fe4b8f6d04224c8ed80a65ffbe295e98808326e4774b05e86c769055"

private_pem = rsa.exportKey()
# public_pem = rsa.publickey().exportKey()
cipher = Cipher_OAEP.new(private_pem)
# cipher = Cipher_pkcs1_v1_5.new(private_pem)
text = cipher.decrypt(message)


