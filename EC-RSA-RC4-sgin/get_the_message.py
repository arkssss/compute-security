"""
通过验证出来的密文
解密出密文
"""
import rsa
# --------------test 1
# rsa.newkeys(2048)

n = 26849715387270072803647991159870818222650212011270601788203901161095783946768442387753818251134435971504297930952032696297469012181411778522262566561023035272625436061723445828778690361181268108277187024475233943005868508863605531107991661865776631965010572323840035023694892360448510464410753412306895721463289248273586786640613955184934513408666415040698372897263483253665610864349938441900828945033630477713145958820119631586263348674747513309262780336292410366479185522203485505663806664305900426866391003189836910768071963223804479558042968547231120623625851816119720576769786113672481662077883346158376274925457

e = 65537

d = 13798697895214051941646214966440469178587390188009904921319187558278027665457801059888862055273493415265212911979422513145170724923053086232331743966642001480343886842469252162276196195354475962507956363143725749338246444711157024173341275360502048327105621045199753110961253484173310968639367883415471191625400985885208095848693041082541555802002108508643143093506074760847331475136723804419065326622465898323800048166026109734751090675029023667045706067347072895646879190267310461500576680151135612439213030264874050805692568597681452941933100711773734225082151153349079525326489944114436058120383523292484832720421

p = 2978911092569083728248589980813918328031210931249468785495540704578085493952349403373744838620925997177896983949350865743983243533268020491646994841810696549376061408901489395279662413817799549055661889159625925126497057945653660070655815524881976035882386980549984699300333405726382872282637995726571987297681281949264808662983

q = 9013265100206209946439630174927440153637885158658493706938635447308187714826579741886691515085536640580481098475930085881361647745865409844173757340624179482664715555853355324149033737130293016448425001073586285277186734356821922092540169336402790104494055791347876109272609441747715720679
# the_sk = rsa.PrivateKey(n, e, d, p, q)


# (pubkey, privkey) = rsa.newkeys(1024)
privkey = rsa.PrivateKey(n, e, d, p, q)
pubkey = rsa.PublicKey(n, e)

# with open('private.pem', 'w+') as f:
#     f.write(privkey.save_pkcs1().decode())

# 明文：业务员发现的商机
message = 'asdasdasdasdasdasdasdasd'
# 业务员用公司经理事先给的公钥对明文加密，得到密文
crypto_email_text = rsa.encrypt(message.encode(), pubkey)

# 然后，业务员用email发送密文
# 。。。


# email在网络传输中 。。。（各种数据被抓包、邮箱密码泄露）
# 没办法，还是被有心人看到了这封email:
# print(crypto_email_text.hex()) # 什么鬼？看不懂啊！
cy = crypto_email_text.hex()
# print(type(crypto_email_text))
# print(crypto_email_text)
# cy = crypto_email_text.hex()
# print(cy)
# print(type(cy))

cy = bytes.fromhex(cy)
# 最后，公司经理也收到了业务员们发了的email。打开，也只看到一堆奇怪的字符！
# 没问题，公司经理用自己的私钥对收到的密文进行解密，就可得到明文
message = rsa.decrypt(cy, privkey).decode()
print(message)



# --------------test 2
# n = 0xcce2d777de9aba6d530cf97b4a09fec0dbcfc1ec3c9b8bda03af2500a5cd32f0d41e201405b4116b898c5a79b087e9c57924cdff41be03780923c01a3d83d577f68dfc18b62f9dcead88fc3e728df1c2807b548d1d4089844125258bfc756c0d1b3079c2bb2cc10ffedf5334a46a024898504d20534fc4011e406d2e1a4434d0d8beab5ab5c642dd135bb5264cbfd077f162f4076df7d24d556d449ba3b5ac7b1199dd38cea50a9a9fbf7e1c2c79c38fecad932057526c3d90d640e570d08d10f70391e7fd46b1b4fbc91060e66c8ef060729ba4b36788ab10bb4c846b1875c047ab93bd156a4bb0a1fc35fd1a9d34602449f434725d7413d02fb38554a04a7b
# n_int = int(str(n), 16)
# e = 10001
# e_int = int(str(e), 16)
# d = 0x8a0182014c000cf2f6ae169de5113677d197ef97a07b6588445305299a84cd7b4a65c055bc41be3a213c58f4fee38da36626545b4b7d21f908aefc06b0c8cc5131d211acd38adf5107b2edb5629419f45976b94d14171489f1178462f67a617db282c48156729ed89764f636cf4858a16d77297c4ca1bdf4c2dbc2aefb22562fe185628f8c8e877d863f205aaf702581acea40333866e6b91ab7859a481b77e9f1abba0a9d706b4255b8817eced4dc4359d05f3c2b6cc6b5bc6364cccda62d984881fa9fb20143486b7a3044acef41e444911ab370d98fa7903d89361c9db41b932cbd309c33d786409615b1f5629826ac4ecf114bebb5f9a948e5f18c1fba9
# d_int = int(str(d), 16)
# p = 0xf5a3ed24088ed7379f3738b912ff5cb8443d839d015ea97781c363b317fe1e9d1091e44e86f3b91fe263b24363061e4184f5d42eb5702e30f57ec35695fc5857f330f17a35ecdeb230f02d4f66065e94b42579b653cdb2d54736f11ad678834e6d992abe58ebb97e48c7c4555653ac125f6860891c7b491af36558bac4cf8095
# p_int = int(str(p), 16)
# q = 0xd586e8c6393e5b272ef1526e0fd78709b4df07c4313f9ff95b211bb99bd421ec9bdc339cda23c46d47a438a4d2fcd04fdac099d95a62bd863ba00b0eb39008efa198270dabb1d943a8687419f61f95a94c6bc1af360cb3f613e71ee4dc6b849fa581912ff3ad5071dc55a01858a0ac87a477747dfdd881ca31dc8ba12aab8acf
# q_int = int(str(q), 16)
# # (pubkey, privkey) = rsa.newkeys(1024)
# privkey = rsa.PrivateKey(n_int, e_int, d_int, p_int, q_int)
# pubkey = rsa.PublicKey(n_int, e_int)
#
# message = 'asdasdasdasdasdasdasdasd'
#
# crypto_email_text = rsa.encrypt(message.encode(), pubkey)
#
# cy = crypto_email_text.hex()
# # print(type(crypto_email_text))
# # print(crypto_email_text)
# # cy = crypto_email_text.hex()
# # print(cy)
# # print(type(cy))
#
# cy = bytes.fromhex(cy)
# message = rsa.decrypt(cy, privkey).decode()




# -------------- test 3
n = 0xb8ed960024a0e70bc898b0a9ae12d48bcee6630708b7083b35a2b94ef847afacc24adf1575e02a8069c887b28ccde72c9487527ca66524f590e05a7b73bed05b7c7a050b08d0bfa806003162eae9b5ce55504a10a893a9c577b865925a58b1f30d1b83a5d066496806c83676a75b908b4aad77eb8e7eb18a8087b3a7d63cbd00ded3e6341bd517def4e5e93d95856ad5b15b50713744058fa8f999eeb3965daba9b172f8fd51c06d668e38b769097f5a3c31eb4f1391a4c59c36a717806c4ba3d11b2d444fa1fa0b2376b4d890b19ceda0bff48b6312b99b070ef94743f3643c005f932907222c839d60b26132182ff35380a7bd773194a6e389d1c078dc3ac5
n_int = int(str(n), 10)
e = 0x10001
e_int = int(str(e), 10)
d = 0x7247c08ece13f13442feb90de2d918285defd9fa9ad4216e15b33db9238d896ec592e751a7caa3f93f660115c215ec6a8c4f24168bedad6d63de818c10f73663930504e0d0cdcfe2d1f284929081652ce16400a152cc0dfa4e05d21f235df47a32fb71dba271d3a349ada89aa2c9df05755cc5e2f7e82b67600e7c6397ed690e778e8920e78de804ac42c38f1fdeabb4f0ba1c0051233f4db3beeca20da2eec793634b7be6374c93cffbec899faa2ca188daeef4954b10fc12fbbb4a21ef91f776fea7e8f9158dc95ed840a4b59402d2ce3e7b765e5d2085c474e23b8a03c4891e1d9df1493d9d35aece0900c0fab7d495691992352cf9faef29fa29ffddf301
d_int = int(str(d), 10)
p = 0xd206f0fc22a2cc0ce883d3a432a5cd74fa82b7468328290fe30b630c7f07ecf4054e77571d824145474f6c6dbad73616329e347e62d95cc721431d6042d475d81aaad611e9944f924b4fbd53650900a463c39af2ae3f9f065f6e5c66838c5113289bc951c6b5a120a826d13714f57c25e5ab4a913ab205276474593f10175631
p_int = int(str(p), 10)
q = 0xe168326f43de13fa2c17c02d943de0419cbbd889d087df1f6591c61c6b7e00cb73782719bc16e184543dfc514a262c5e38e15cc1bef4f93d70012d4a8982926b8d3ce50acc35b90adaec562d5ee11e19f35350e4b940a414f07a9e8b43d53f058798ee88e6e00d25f2992d0c9ec50ba4b051d16851a40cf522aa4f172db4c4d5
q_int = int(str(q), 10)
# (pubkey, privkey) = rsa.newkeys(1024)
privkey = rsa.PrivateKey(n_int, e_int, d_int, p_int, q_int)
pubkey = rsa.PublicKey(n_int, e_int)
# print(p*q)
# print(p_int*q_int)
# print(n_int)
# a = 0x10
# print(int(str(a), 10))
message = 'asdasdasdasdasdasdasdasd'

crypto_email_text = rsa.encrypt(message.encode(), pubkey)
cy = crypto_email_text.hex()
# print(type(crypto_email_text))
# print(crypto_email_text)
# cy = crypto_email_text.hex()
# print(cy)
# print(type(cy))

cy = bytes.fromhex(cy)
message = rsa.decrypt(cy, privkey).decode()
print(message)

# -------------- test 4
# n = "b8ed960024a0e70bc898b0a9ae12d48bcee6630708b7083b35a2b94ef847afacc24adf1575e02a8069c887b28ccde72c9487527ca66524f590e05a7b73bed05b7c7a050b08d0bfa806003162eae9b5ce55504a10a893a9c577b865925a58b1f30d1b83a5d066496806c83676a75b908b4aad77eb8e7eb18a8087b3a7d63cbd00ded3e6341bd517def4e5e93d95856ad5b15b50713744058fa8f999eeb3965daba9b172f8fd51c06d668e38b769097f5a3c31eb4f1391a4c59c36a717806c4ba3d11b2d444fa1fa0b2376b4d890b19ceda0bff48b6312b99b070ef94743f3643c005f932907222c839d60b26132182ff35380a7bd773194a6e389d1c078dc3ac5"
# n_int = int(n, 16)
# print(n_int)
# e = "10001"
# e_int = int(str(e), 16)
# d = "7247c08ece13f13442feb90de2d918285defd9fa9ad4216e15b33db9238d896ec592e751a7caa3f93f660115c215ec6a8c4f24168bedad6d63de818c10f73663930504e0d0cdcfe2d1f284929081652ce16400a152cc0dfa4e05d21f235df47a32fb71dba271d3a349ada89aa2c9df05755cc5e2f7e82b67600e7c6397ed690e778e8920e78de804ac42c38f1fdeabb4f0ba1c0051233f4db3beeca20da2eec793634b7be6374c93cffbec899faa2ca188daeef4954b10fc12fbbb4a21ef91f776fea7e8f9158dc95ed840a4b59402d2ce3e7b765e5d2085c474e23b8a03c4891e1d9df1493d9d35aece0900c0fab7d495691992352cf9faef29fa29ffddf301"
# d_int = int(str(d), 16)
# p = "d206f0fc22a2cc0ce883d3a432a5cd74fa82b7468328290fe30b630c7f07ecf4054e77571d824145474f6c6dbad73616329e347e62d95cc721431d6042d475d81aaad611e9944f924b4fbd53650900a463c39af2ae3f9f065f6e5c66838c5113289bc951c6b5a120a826d13714f57c25e5ab4a913ab205276474593f10175631"
# p_int = int(str(p), 16)
# q = "e168326f43de13fa2c17c02d943de0419cbbd889d087df1f6591c61c6b7e00cb73782719bc16e184543dfc514a262c5e38e15cc1bef4f93d70012d4a8982926b8d3ce50acc35b90adaec562d5ee11e19f35350e4b940a414f07a9e8b43d53f058798ee88e6e00d25f2992d0c9ec50ba4b051d16851a40cf522aa4f172db4c4d5"
# q_int = int(str(q), 16)
# # (pubkey, privkey) = rsa.newkeys(1024)
# privkey = rsa.PrivateKey(n_int, e_int, d_int, p_int, q_int)
# pubkey = rsa.PublicKey(n_int, e_int)
# print(p*q)
# print(p_int*q_int)
# print(n_int)
# a = 0x10
# print(int(str(a), 10))
# message = 'asdasdasdasdasdasdasdasd'
#
# crypto_email_text = rsa.encrypt(message.encode(), pubkey)
# cy = crypto_email_text.hex()
# # print(type(crypto_email_text))
# # print(crypto_email_text)
# # cy = crypto_email_text.hex()
# # print(cy)
# # print(type(cy))
#
# cy = bytes.fromhex(cy)
# message = rsa.decrypt(cy, privkey).decode()
# print(message)

# -------------- test 5

#
# a = "10,\n"
# b = 0x10
#
# print(int(a, 16))
# print(int(str(b), 16))




# -------------- workspace
Cipher_key = "5cb30d833feaa8db2c62c419c901dec66d8a09f58ad0a459414187cbbb33aeba8c733e0a5466094d9a8000cbff06452f8267585596e90b40dfee0d094ccf4f1781b513f7c27dc165784eb79badb36d86da272276f07fd0c7778901b828b178b646b1eac3c5913bb0c72bcc8aa677837195fb1c642cb7bc2ff87d19b4e7cb853fb6e8fbc5d547a359b867bda72b83e2c1546ce4e2c5650cf6277a33db3c92d202da589b215c34f6f3e7db63152fd20c90c84c5699620ce254cb88f8fb2839532e3e343ce283b5a1d6af748a728eb7e3adf2ad53bbe8cf755308b5bda1fc5c4a96b46159b0fe4b8f6d04224c8ed80a65ffbe295e98808326e4774b05e86c769055"
n = 0xb8ed960024a0e70bc898b0a9ae12d48bcee6630708b7083b35a2b94ef847afacc24adf1575e02a8069c887b28ccde72c9487527ca66524f590e05a7b73bed05b7c7a050b08d0bfa806003162eae9b5ce55504a10a893a9c577b865925a58b1f30d1b83a5d066496806c83676a75b908b4aad77eb8e7eb18a8087b3a7d63cbd00ded3e6341bd517def4e5e93d95856ad5b15b50713744058fa8f999eeb3965daba9b172f8fd51c06d668e38b769097f5a3c31eb4f1391a4c59c36a717806c4ba3d11b2d444fa1fa0b2376b4d890b19ceda0bff48b6312b99b070ef94743f3643c005f932907222c839d60b26132182ff35380a7bd773194a6e389d1c078dc3ac5
n_int = int(str(n), 10)
e = 0x10001
e_int = int(str(e), 10)
d = 0x7247c08ece13f13442feb90de2d918285defd9fa9ad4216e15b33db9238d896ec592e751a7caa3f93f660115c215ec6a8c4f24168bedad6d63de818c10f73663930504e0d0cdcfe2d1f284929081652ce16400a152cc0dfa4e05d21f235df47a32fb71dba271d3a349ada89aa2c9df05755cc5e2f7e82b67600e7c6397ed690e778e8920e78de804ac42c38f1fdeabb4f0ba1c0051233f4db3beeca20da2eec793634b7be6374c93cffbec899faa2ca188daeef4954b10fc12fbbb4a21ef91f776fea7e8f9158dc95ed840a4b59402d2ce3e7b765e5d2085c474e23b8a03c4891e1d9df1493d9d35aece0900c0fab7d495691992352cf9faef29fa29ffddf301
d_int = int(str(d), 10)
p = 0xd206f0fc22a2cc0ce883d3a432a5cd74fa82b7468328290fe30b630c7f07ecf4054e77571d824145474f6c6dbad73616329e347e62d95cc721431d6042d475d81aaad611e9944f924b4fbd53650900a463c39af2ae3f9f065f6e5c66838c5113289bc951c6b5a120a826d13714f57c25e5ab4a913ab205276474593f10175631
p_int = int(str(p), 10)
q = 0xe168326f43de13fa2c17c02d943de0419cbbd889d087df1f6591c61c6b7e00cb73782719bc16e184543dfc514a262c5e38e15cc1bef4f93d70012d4a8982926b8d3ce50acc35b90adaec562d5ee11e19f35350e4b940a414f07a9e8b43d53f058798ee88e6e00d25f2992d0c9ec50ba4b051d16851a40cf522aa4f172db4c4d5
q_int = int(str(q), 10)
# rsa.newkeys(1024)
# the_sk = rsa.PrivateKey(n, e, d, p, q)
the_sk = rsa.PrivateKey(n_int, e_int, d_int, p_int, q_int)
the_pk = rsa.PublicKey(n_int, e_int)

Cipher_key = Cipher_key.encode("ascii")
# print(Cipher_key)
# Cipher_key = bytes.fromhex(Cipher_key)
message = rsa.decrypt(Cipher_key, the_sk)
# message = rsa.decrypt(Cipher_key.encode("ascii"), the_sk)
# message = rsa.decrypt(Cipher_key, the_sk)

print(message)




